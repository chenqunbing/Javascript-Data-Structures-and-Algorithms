单向列表：
创建链表：
	1.LinkedList数据结构还需要一个辅助的Node类，Node表示要加入列表的项。它包含一个element属性，即要添加的列表的值，
	以及一个next属性，即指向列表中下一个节点项的指针。
	2.LinkedList类也有存储列比项的数量的length属性（内部私有变量）。
	3.另外，我们需要一个存储一个节点的引用。
向链表的尾部追加元素：
	1.两种场景：列表为空 或者 列表不为空。
	2.首先我们把element作为值传入，创建Node项。
	3.如果head为null，那么就是向链表中添加第一个元素，要做的就是让head指向第一个元素node，因为在Node类中this.next=null,
	也就是说，node的下一个元素会自动指向null。
从链表中移除元素：
	1.两种场景：移除第一个元素 或者 移除除第一个元素以外的其它元素。
	2.两种remove方法：从特定位置移除元素 或者 根据元素的值移除元素。
在任意位置插入一个元素：
	1.两种场景：在链表的起点添加一个元素 或者 在链表的中间或者尾部添加一个元素。
	2.对于第二种场景:在列表中间或者尾部添加一个项。首先我们需要循环访问列表，找到目标位置。当跳出循环时，current变量将是对
	想要插入新元素的位置之后的一个元素的引用，而previous将是对象要插入新元素的位置之前的一个元素的引用。
实现其他方法:
	1.toString方法会把LinkedList对象转换成一个字符串。
	2.indexOf方法接收一个元素的值，如果在列表中找到它，就返回该元素的位置，否则返回-1。


双向列表：
创建链表：
	1.双向链表和普通链表的差别在于，普通链表中，一个节点只有链向下一个节点的链接，而双向链表中，链接是双向的，一个
	链向下一个元素，一个链向前一个元素。

	